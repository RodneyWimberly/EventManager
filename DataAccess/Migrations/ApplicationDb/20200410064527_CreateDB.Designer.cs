// <auto-generated />
using System;
using EventManager.DataAccess;
using EventManager.DataAccess.Core.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventManager.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200410064527_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.Demerit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<int>("EventOccurrenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuestId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("EventOccurrenceId");

                    b.HasIndex("GuestId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Demerits");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(2);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("EventLocations");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lead")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventLocationId");

                    b.HasIndex("EventScheduleId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("EventOccurrences");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckInEndTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(8);

                    b.Property<string>("CheckInStartTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(8);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<Days>("DaysOfTheWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(8);

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(8);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventLocationId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("EventSchedules");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.ToTable("EventServices");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ExtendedLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Browser")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Cookies")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FormVariables")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Host")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Method")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("QueryString")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("ServerVariables")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("User")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("TimeStamp");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("City")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<bool>("EstablishedGuest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<Sexes>("Sex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasColumnType("TEXT")
                        .HasMaxLength(2);

                    b.Property<string>("Suffix")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.GuestEventOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<int>("EventOccurrenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuestId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("EventOccurrenceId");

                    b.HasIndex("GuestId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("GuestEventOccurrences");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<ServiceTypes>("ServiceType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(36);

                    b.Property<string>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManager.DataAccess.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.Demerit", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.EventOccurrence", "EventOccurrence")
                        .WithMany("Demerits")
                        .HasForeignKey("EventOccurrenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventManager.DataAccess.Models.Guest", "Guest")
                        .WithMany("Demerits")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventLocation", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.Event", "Event")
                        .WithMany("Locations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventOccurrence", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.Event", "Event")
                        .WithMany("Occurrences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventManager.DataAccess.Models.EventLocation", "Location")
                        .WithMany("Occurrences")
                        .HasForeignKey("EventLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventManager.DataAccess.Models.EventSchedule", "Schedule")
                        .WithMany("Occurrences")
                        .HasForeignKey("EventScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventSchedule", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.Event", "Event")
                        .WithMany("Schedules")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventManager.DataAccess.Models.EventLocation", "Location")
                        .WithMany("Schedules")
                        .HasForeignKey("EventLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.EventService", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.Event", "Event")
                        .WithMany("Services")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventManager.DataAccess.Models.Service", "Service")
                        .WithMany("EventServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManager.DataAccess.Models.GuestEventOccurrence", b =>
                {
                    b.HasOne("EventManager.DataAccess.Models.EventOccurrence", "EventOccurrence")
                        .WithMany()
                        .HasForeignKey("EventOccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManager.DataAccess.Models.Guest", "Guest")
                        .WithMany("EventOccurrences")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

{
	"info": {
		"_postman_id": "8d65a60d-d54d-4577-afac-5c36ba79bba9",
		"name": "Event Manager API",
		"description": "EventManager WebAPI Documentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "users",
							"item": [
								{
									"name": "me",
									"item": [
										{
											"name": "preferences",
											"item": [
												{
													"name": "Account User Preferences",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/me/preferences",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me",
																"preferences"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Account/users/me/preferences",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Account",
																		"users",
																		"me",
																		"preferences"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "\"sint\""
														}
													]
												},
												{
													"name": "Account User Preferences2",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"<string>\"",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/me/preferences",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me",
																"preferences"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "\"<string>\""
																},
																"url": {
																	"raw": "{{apiUrl}}/Account/users/me/preferences",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Account",
																		"users",
																		"me",
																		"preferences"
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Account Get Current User",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/me",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"me"
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/me",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Account Update Current User",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/Account/users/me",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"me"
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/me",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/me",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/me",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me"
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Account Update Current User2",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[]",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/Account/users/me",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"me"
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/me",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/me",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																"me"
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "{id}",
									"item": [
										{
											"name": "Account Get User By Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										},
										{
											"name": "Account Delete User",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										},
										{
											"name": "Account Update User",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/Account/users/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										},
										{
											"name": "Account Update User2",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[]",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/Account/users/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/users/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Account Get Users All",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/users",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"users"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								},
								{
									"name": "Account Get User By User Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/users/username/:userName",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"users",
												"username",
												":userName"
											],
											"variable": [
												{
													"key": "userName",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/username/:userName",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"username",
														":userName"
													],
													"variable": [
														{
															"key": "userName"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/username/:userName",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"username",
														":userName"
													],
													"variable": [
														{
															"key": "userName"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/username/:userName",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"username",
														":userName"
													],
													"variable": [
														{
															"key": "userName"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Account Get Users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/users/:pageNumber/:pageSize",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"users",
												":pageNumber",
												":pageSize"
											],
											"variable": [
												{
													"key": "pageNumber",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageSize",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/:pageNumber/:pageSize",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														":pageNumber",
														":pageSize"
													],
													"variable": [
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								},
								{
									"name": "Account Unblock User",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/users/unblock/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"users",
												"unblock",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/unblock/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"unblock",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/users/unblock/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users",
														"unblock",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Account Register",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Account/users",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"users"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Account/users",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Account/users",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Account/users",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "roles",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Account Get Role By Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/roles/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										},
										{
											"name": "Account Delete Role",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/roles/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										},
										{
											"name": "Account Update Role",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/Account/roles/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Account/roles/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Account",
																"roles",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Account Get Roles All",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/roles",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"roles"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/roles",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								},
								{
									"name": "Account Get Role By Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/roles/name/:name",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"roles",
												"name",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/roles/name/:name",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles",
														"name",
														":name"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/roles/name/:name",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles",
														"name",
														":name"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/roles/name/:name",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles",
														"name",
														":name"
													],
													"variable": [
														{
															"key": "name"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Account Get Roles",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/roles/:pageNumber/:pageSize",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"roles",
												":pageNumber",
												":pageSize"
											],
											"variable": [
												{
													"key": "pageNumber",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageSize",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Account/roles/:pageNumber/:pageSize",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles",
														":pageNumber",
														":pageSize"
													],
													"variable": [
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								},
								{
									"name": "Account Create Role",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Account/roles",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"roles"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Account/roles",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Account/roles",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Account",
														"roles"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account Get All Permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/Account/permissions",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"Account",
										"permissions"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Account/permissions",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Account",
												"permissions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"name\": \"do cupidatat\",\n  \"value\": \"Excepteur\",\n  \"groupName\": \"amet\",\n  \"description\": \"dolore Lorem exercitation laborum magna\"\n },\n {\n  \"name\": \"eu ullamco ut mollit\",\n  \"value\": \"quis\",\n  \"groupName\": \"dolore fugiat\",\n  \"description\": \"nulla ea ut\"\n }\n]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Event",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "{include Property Paths}",
									"item": [
										{
											"name": "Event Get Event",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":id",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Event Put Event",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":id",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Event Patch Event",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[]",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":id",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[]"
														},
														"url": {
															"raw": "{{apiUrl}}/Event/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Event Delete Event",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Location",
							"item": [
								{
									"name": "Schedule/{event Schedule Id}",
									"item": [
										{
											"name": "Event Get All Event Locations By Event Schedule",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Location/Schedule/:eventScheduleId/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Location",
														"Schedule",
														":eventScheduleId",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventScheduleId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Location/Schedule/:eventScheduleId/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Location",
																"Schedule",
																":eventScheduleId",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventScheduleId"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n },\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Locations By Event Schedule Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Location/Schedule/:eventScheduleId/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Location",
														"Schedule",
														":eventScheduleId",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventScheduleId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Location/Schedule/:eventScheduleId/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Location",
																"Schedule",
																":eventScheduleId",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventScheduleId"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n },\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "{id}",
									"item": [
										{
											"name": "{include Property Paths}",
											"item": [
												{
													"name": "Event Get Event Location",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Location",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Location",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Location",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Event Put Event Location",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Location",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Location",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Location",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														}
													]
												},
												{
													"name": "Event Patch Event Location",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[]",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Location",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Location",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Location/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Location",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Event Delete Event Location",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Location/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Location",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Location/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Location",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Location/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Location",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Event Get All Event Locations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Location/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Location",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Location/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Location",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n },\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n }\n]"
										}
									]
								},
								{
									"name": "Event Get All Event Locations Paged",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Location/:pageNumber/:pageSize/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Location",
												":pageNumber",
												":pageSize",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "pageNumber",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageSize",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Location/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Location",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														},
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n },\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n }\n]"
										}
									]
								},
								{
									"name": "Event Post Event Location",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Event/Location",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Location"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Location",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Location"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Location",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Location"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "{event Id}",
							"item": [
								{
									"name": "Location",
									"item": [
										{
											"name": "Event Get All Event Locations By Event",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Location/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Location",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Location/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Location",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n },\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Locations By Event Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Location/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Location",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Location/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Location",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n },\n {\n  \"eventId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"address1\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipCode\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"schedules\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daysOfTheWeek\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endDate\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"startTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"endTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInStartTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"checkInEndTime\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"occurances\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"occurances\": [\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   },\n   {\n    \"eventId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventLocationId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"eventScheduleId\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lead\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"event\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"location\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"schedule\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"demerits\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   }\n  ],\n  \"address2\": \"<string>\"\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Schedule",
									"item": [
										{
											"name": "Event Get All Event Schedules By Event",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Schedule/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Schedule",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Schedule/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Schedule",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Schedules By Event Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Schedule/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Schedule",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Schedule/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Schedule",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Occurrence",
									"item": [
										{
											"name": "Event Get All Event Occurrences By Event",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Occurrence/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Occurrence",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Occurrence/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Occurrence",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Occurrences By Event Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Occurrence/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Occurrence",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Occurrence/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Occurrence",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Service",
									"item": [
										{
											"name": "Event Get All Event Services By Event",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Service/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Service",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Service/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Service",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Services By Event Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/:eventId/Service/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														":eventId",
														"Service",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/:eventId/Service/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																":eventId",
																"Service",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventId"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Schedule",
							"item": [
								{
									"name": "Location/{event Location Id}",
									"item": [
										{
											"name": "Event Get All Event Schedules By Event Location",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Schedule/Location/:eventLocationId/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Schedule",
														"Location",
														":eventLocationId",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventLocationId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Schedule/Location/:eventLocationId/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Schedule",
																"Location",
																":eventLocationId",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventLocationId"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Schedules By Event Location Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Schedule/Location/:eventLocationId/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Schedule",
														"Location",
														":eventLocationId",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventLocationId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Schedule/Location/:eventLocationId/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Schedule",
																"Location",
																":eventLocationId",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventLocationId"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "{id}",
									"item": [
										{
											"name": "{include Property Paths}",
											"item": [
												{
													"name": "Event Get Event Schedule",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Schedule",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Schedule",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Schedule",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Event Put Event Schedule",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Schedule",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Schedule",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Schedule",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Event Patch Event Schedule",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[]",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Schedule",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Schedule",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Schedule/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Schedule",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Event Delete Event Schedule",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Schedule/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Schedule",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Schedule/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Schedule",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Schedule/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Schedule",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Event Get All Event Schedules",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Schedule/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Schedule",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Schedule/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Schedule",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
										}
									]
								},
								{
									"name": "Event Get All Event Schedules Paged",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Schedule/:pageNumber/:pageSize/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Schedule",
												":pageNumber",
												":pageSize",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "pageNumber",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageSize",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Schedule/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Schedule",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														},
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
										}
									]
								},
								{
									"name": "Event Post Event Schedule",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Event/Schedule",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Schedule"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Schedule",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Schedule"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Schedule",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Schedule"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Occurrence",
							"item": [
								{
									"name": "Location/{event Locationid}",
									"item": [
										{
											"name": "Event Get All Event Occurrences By Event Location",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence/Location/:eventLocationid/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence",
														"Location",
														":eventLocationid",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventLocationId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/Location/:eventLocationid/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																"Location",
																":eventLocationid",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventLocationid"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Occurrences By Event Location Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence/Location/:eventLocationid/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence",
														"Location",
														":eventLocationid",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventLocationId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/Location/:eventLocationid/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																"Location",
																":eventLocationid",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventLocationid"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Schedule/{event Scheduleid}",
									"item": [
										{
											"name": "Event Get All Event Occurrences By Event Schedule",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence/Schedule/:eventScheduleid/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence",
														"Schedule",
														":eventScheduleid",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventScheduleId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/Schedule/:eventScheduleid/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																"Schedule",
																":eventScheduleid",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventScheduleid"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Occurrences By Event Schedule Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence/Schedule/:eventScheduleid/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence",
														"Schedule",
														":eventScheduleid",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "eventScheduleid",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/Schedule/:eventScheduleid/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																"Schedule",
																":eventScheduleid",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "eventScheduleid"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"daysOfTheWeek\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"checkInEndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "{id}",
									"item": [
										{
											"name": "{include Property Paths}",
											"item": [
												{
													"name": "Event Get Event Occurrence",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Occurrence",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Occurrence",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Event Put Event Occurrence",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Occurrence",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Occurrence",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														}
													]
												},
												{
													"name": "Event Patch Event Occurrence",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[]",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Occurrence",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Occurrence/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Occurrence",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Event Delete Event Occurrence",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Occurrence/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Occurrence",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Event Get All Event Occurrences",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Occurrence/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Occurrence",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
										}
									]
								},
								{
									"name": "Event Get All Event Occurrences Paged",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Occurrence/:pageNumber/:pageSize/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Occurrence",
												":pageNumber",
												":pageSize",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "pageNumber",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageSize",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														},
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"eventId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventLocationId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"eventScheduleId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"date\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lead\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"event\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedule\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"demerits\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
										}
									]
								},
								{
									"name": "Event Post Event Occurrence",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Event/Occurrence",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Occurrence"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Occurrence",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Occurrence"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service",
							"item": [
								{
									"name": "Service/{service Id}",
									"item": [
										{
											"name": "Event Get All Event Services By Service",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Service/Service/:serviceId/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Service",
														"Service",
														":serviceId",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "serviceId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Service/Service/:serviceId/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Service",
																"Service",
																":serviceId",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "serviceId"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]"
												}
											]
										},
										{
											"name": "Event Get All Event Services By Service Paged",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Service/Service/:serviceId/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Service",
														"Service",
														":serviceId",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "serviceId",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "pageNumber",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "pageSize",
															"value": "<integer>",
															"description": "(Required) "
														},
														{
															"key": "includePropertyPaths",
															"value": "",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Service/Service/:serviceId/:pageNumber/:pageSize/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Service",
																"Service",
																":serviceId",
																":pageNumber",
																":pageSize",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "serviceId"
																},
																{
																	"key": "pageNumber"
																},
																{
																	"key": "pageSize"
																},
																{
																	"key": "includePropertyPaths"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "{id}",
									"item": [
										{
											"name": "{include Property Paths}",
											"item": [
												{
													"name": "Event Get Event Service",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Service",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Service",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Service",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Event Put Event Service",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Service",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Service",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Service",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Event Patch Event Service",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[]",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Service",
																":id",
																":includePropertyPaths"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "includePropertyPaths",
																	"value": "",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Service",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
														},
														{
															"name": "Untitled Example",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "[]"
																},
																"url": {
																	"raw": "{{apiUrl}}/Event/Service/:id/:includePropertyPaths",
																	"host": [
																		"{{apiUrl}}"
																	],
																	"path": [
																		"Event",
																		"Service",
																		":id",
																		":includePropertyPaths"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "includePropertyPaths"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Event Delete Event Service",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Service/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Service",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Service/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Service",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
												},
												{
													"name": "Untitled Example",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{apiUrl}}/Event/Service/:id",
															"host": [
																"{{apiUrl}}"
															],
															"path": [
																"Event",
																"Service",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Event Get All Event Services",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Service/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Service",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Service/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Service",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]"
										}
									]
								},
								{
									"name": "Event Get All Event Services Paged",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/Service/:pageNumber/:pageSize/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Service",
												":pageNumber",
												":pageSize",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "pageNumber",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageSize",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "includePropertyPaths",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Event/Service/:pageNumber/:pageSize/:includePropertyPaths",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Service",
														":pageNumber",
														":pageSize",
														":includePropertyPaths"
													],
													"variable": [
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														},
														{
															"key": "includePropertyPaths"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n {\n  \"eventId\": \"<string>\",\n  \"serviceId\": \"<string>\",\n  \"event\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"locations\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"schedules\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"occurances\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"services\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"service\": {\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serviceType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"eventServices\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n }\n]"
										}
									]
								},
								{
									"name": "Event Post Event Service",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Event/Service",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												"Service"
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Service",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Service"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Event/Service",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Event",
														"Service"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Event Get All Events",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/Event/:includePropertyPaths",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"Event",
										":includePropertyPaths"
									],
									"variable": [
										{
											"key": "includePropertyPaths",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "includePropertyPaths"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"locations\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedules\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"services\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"locations\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedules\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"services\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
								}
							]
						},
						{
							"name": "Event Get All Events Paged",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/Event/:pageNumber/:pageSize/:includePropertyPaths",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"Event",
										":pageNumber",
										":pageSize",
										":includePropertyPaths"
									],
									"variable": [
										{
											"key": "pageNumber",
											"value": "<integer>",
											"description": "(Required) "
										},
										{
											"key": "pageSize",
											"value": "<integer>",
											"description": "(Required) "
										},
										{
											"key": "includePropertyPaths",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Event/:pageNumber/:pageSize/:includePropertyPaths",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event",
												":pageNumber",
												":pageSize",
												":includePropertyPaths"
											],
											"variable": [
												{
													"key": "pageNumber"
												},
												{
													"key": "pageSize"
												},
												{
													"key": "includePropertyPaths"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"locations\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedules\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"services\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"locations\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"schedules\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"occurances\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"services\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
								}
							]
						},
						{
							"name": "Event Post Event",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/Event",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"Event"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{apiUrl}}/Event",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
								},
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{apiUrl}}/Event",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Event"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Extended Log",
					"item": [
						{
							"name": "level/{level}",
							"item": [
								{
									"name": "Extended Log Get By Level",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog/level/:level",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog",
												"level",
												":level"
											],
											"variable": [
												{
													"key": "level",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/level/:level",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														"level",
														":level"
													],
													"variable": [
														{
															"key": "level"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/level/:level",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														"level",
														":level"
													],
													"variable": [
														{
															"key": "level"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Extended Log Get By Level Paged",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog/level/:level/:pageNumber/:pageSize",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog",
												"level",
												":level",
												":pageNumber",
												":pageSize"
											],
											"variable": [
												{
													"key": "level",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageNumber",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "pageSize",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/level/:level/:pageNumber/:pageSize",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														"level",
														":level",
														":pageNumber",
														":pageSize"
													],
													"variable": [
														{
															"key": "level"
														},
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/level/:level/:pageNumber/:pageSize",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														"level",
														":level",
														":pageNumber",
														":pageSize"
													],
													"variable": [
														{
															"key": "level"
														},
														{
															"key": "pageNumber"
														},
														{
															"key": "pageSize"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "Extended Log Get",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Extended Log Delete",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Extended Log Put",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Extended Log Patch",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[]"
												},
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[]"
												},
												"url": {
													"raw": "{{apiUrl}}/ExtendedLog/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"ExtendedLog",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Extended Log Get All",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/ExtendedLog",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"ExtendedLog"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "Extended Log Delete All",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/ExtendedLog",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"ExtendedLog"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Extended Log Get All Paged",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/ExtendedLog/:pageNumber/:pageSize",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"ExtendedLog",
										":pageNumber",
										":pageSize"
									],
									"variable": [
										{
											"key": "pageNumber",
											"value": "<integer>",
											"description": "(Required) "
										},
										{
											"key": "pageSize",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog/:pageNumber/:pageSize",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog",
												":pageNumber",
												":pageSize"
											],
											"variable": [
												{
													"key": "pageNumber"
												},
												{
													"key": "pageSize"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "Extended Log Post",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/ExtendedLog",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"ExtendedLog"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
								},
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Notification",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Notification Get",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Notification/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Notification Delete",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Notification/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Notification Put",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Notification/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								},
								{
									"name": "Notification Patch",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/Notification/:id",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[]"
												},
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[]"
												},
												"url": {
													"raw": "{{apiUrl}}/Notification/:id",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"Notification",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Notification Get All",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/Notification",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"Notification"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Notification",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "Notification Get All Paged",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/Notification/:pageNumber/:pageSize",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"Notification",
										":pageNumber",
										":pageSize"
									],
									"variable": [
										{
											"key": "pageNumber",
											"value": "<integer>",
											"description": "(Required) "
										},
										{
											"key": "pageSize",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/Notification/:pageNumber/:pageSize",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification",
												":pageNumber",
												":pageSize"
											],
											"variable": [
												{
													"key": "pageNumber"
												},
												{
													"key": "pageSize"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "Notification Post",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/Notification",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"Notification"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{apiUrl}}/Notification",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{apiUrl}}/Notification",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"Notification"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"dolor Duis cu\",\n \"title\": \"officia Ut est\",\n \"status\": -20681417,\n \"detail\": \"ex dolor irure\",\n \"instance\": \"labore officia esse eiusmod\",\n \"extensions\": {}\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Info",
					"item": [
						{
							"name": "ApiInfo",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/ApiInfo",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"ApiInfo"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/ExtendedLog",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"ExtendedLog"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "tokenName",
				"value": "AuthToken",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "ya29.a0AfH6SMDVV1qTv3ejUQfqexNHBYf48dAiyYZvs15JfIGZaO6y1_F_rCpnayS1OYacGMSAb1RhLkr0LNB9Gw_mdI21fGVeFyNJWBeuJpRN6qJwFHVI686UvRSkZLGfYtzMo_EiwsS6qePzwWSz-MQ9zFuqwLvncOBYQXJqvbOEaRtj",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "implicit",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "profile email openid phone",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://localhost:5001/auth",
				"type": "string"
			},
			{
				"key": "password",
				"value": "P@55w0rd",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "wEbRb42VRLz10rDPnOYvrUtA",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "120435867455-8f37jhdhjbakph7qgvabporq6vmn0d98.apps.googleusercontent.com",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://accounts.google.com/o/oauth2/v2/auth",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://oauth2.googleapis.com/token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "60a026c5-ec07-4f4a-899f-4820d68f5732",
				"type": "text/javascript",
				"exec": [
					"/*******************************************************************************",
					"* OAuth2 - Pre-request Script",
					"********************************************************************************",
					"This is meant to be used as a pre-request script to obtain an Access Token ",
					"and populate a collection variable with the Access Token so it can be used with requests.",
					"This script contanins login to only obtain an Access Token if:",
					"    a. no token is found, or ",
					"    b. the environment has changed since the Access Token was obtained, or ",
					"    c. the token has expired",
					"If you place this as the collection level pre-request script it will only run once per run ",
					"instance consisting of requests and/or folders and/or collection.",
					"",
					"Here is a list of variables used by this script",
					"* Collection:",
					"    * apiUrl:",
					"        Used by collection as root url for all requests",
					"        This is populated by collection pre-request script from the environment variable ",
					"    * AppPrefix:",
					"        Used as the key prefix when looking for Environment or Global variables",
					"    * AuthToken:",
					"        Then AuthToken used for each request. ",
					"        This is populated in the pre-request script if the token cannot be found or the token has expired",
					"        The is set as a Bearer token in the authorization tab of the collection ",
					"        The authentication tab of each folder/request selects parents authentication settings (default)",
					"    * AuthExpiration:",
					"        The expiration timestamp for AuthToken",
					"        This is populated in the pre-request script if a new AuthToken is aquired",
					"",
					"* Environment:",
					"    * {{AppPrefix}}Url:",
					"        Used to populate the apiUri collection variable that is used by all requests",
					"    * {{AppPrefix}}ApiVersion:",
					"        Used when populating apiUrl collection variable.",
					"        If this value exists then /v{{ApiVersion}} is appended to {{AppPrefix}}Url; ",
					"        otherwise only {{AppPrefix}}Url is used",
					"    * {{AppPrefix}}AuthProvider:",
					"        The name of the current Auth provider.",
					"        Currently Internal (ResourceOwnerPassword Flow) and Google (Implicit Flow) are supported.",
					"        This value plus the string \"Auth\" is appended to the AppPrefix to rertieve AuthProvider specific configuratuon",
					"    * {{AppPrefix}}GoogleAuthUser:",
					"        The Client Id supplied by Google used to construct Url for implicit flow",
					"    * {{AppPrefix}}GoogleAuthPassword:",
					"        The Client Secret supplied by Google used to construct Url for implicit flow",
					"    * {{AppPrefix}}GoogleAuthIssuer:",
					"        The issuer url (https://accounts.google.com) used to communicate with Google",
					"    * {{AppPrefix}}InternalAuthUser:",
					"        The application user used to create the AuthToken request",
					"    * {{AppPrefix}}InternalAuthPassword:",
					"        The application password used to create the AuthToken request",
					"    * {{AppPrefix}}InternalAuthIssuer:",
					"        The issuer url (https://localhost:5001) used to communicate with IdentityServer",
					"",
					"* Global: N/A",
					"*/",
					"",
					"// https://joolfe.github.io/postman-util-lib/",
					"eval(pm.globals.get('pmlib_bundle'))",
					"",
					"class QueryStringBuilder {",
					"    _url;",
					"    _params;",
					"    constructor(url) {",
					"        if (url)",
					"            this._url = url;",
					"        this._params = {};",
					"    }",
					"    append(key, value) {",
					"        this._params[key] = value;",
					"        return this;",
					"    }",
					"    build() {",
					"        let href = \"\";",
					"        if (this._url)",
					"            href = this._url + \"?\";",
					"        for (let param in this._params)",
					"            href += encodeURIComponent(param) + '=' + encodeURIComponent(this._params[param]) + '&';",
					"        return href.slice(0, -1)",
					"    }",
					"}",
					"class Configuration {",
					"    _prefix;",
					"    get prefix() { return this._prefix; }",
					"    constructor(configType) {",
					"        if (!configType)",
					"            configType = \"\";",
					"        this._prefix = pm.collectionVariables.get(\"AppPrefix\") + configType;",
					"    }",
					"    set(key, value) {",
					"        const appKey = this.prefix + key;",
					"        if (pm.globals.has(appKey))",
					"            pm.globals.set(appKey, value);",
					"        else if (pm.environment.has(appKey))",
					"            pm.environment.set(appKey, value);",
					"        else",
					"            pm.collectionVariables.set(key, value);",
					"    }",
					"    get(key) {",
					"        const appKey = this.prefix + key;",
					"        let value = pm.globals.get(appKey);",
					"        if (!value)",
					"            value = pm.environment.get(appKey);",
					"        if (!value)",
					"            value = pm.collectionVariables.get(key);",
					"        return value;",
					"    }",
					"    get auth() {",
					"        return JSON.parse(this.get(this.get(\"AuthProvider\") + \"Auth\"));",
					"    }",
					"}",
					"",
					"class AuthManager {",
					"    _config;",
					"    _forceRetreiveToken;",
					"",
					"    constructor() {",
					"        this._config = new Configuration();",
					"",
					"        const baseUrl = this._config.get(\"Url\");",
					"        const apiVersion = this._config.get(\"ApiVersion\");",
					"        let apiUrl = baseUrl;",
					"        if (apiVersion)",
					"            apiUrl = baseUrl + \"/api/v\" + apiVersion;",
					"        else",
					"            apiUrl = baseUrl + \"/api\";",
					"",
					"        this._forceRetreiveToken = apiUrl != this._config.get(\"apiUrl\");",
					"        if (this._forceRetreiveToken)",
					"            this._config.set(\"apiUrl\", apiUrl);",
					"    }",
					"",
					"    get hasTokenExpired() {",
					"        let hasExpired = true;",
					"        const tokenExpiration = new Date(this._config.get(\"AuthExpiration\"));",
					"        if (tokenExpiration)",
					"            hasExpired = new Date() > tokenExpiration;",
					"        return hasExpired;",
					"    }",
					"",
					"    retreiveToken() {",
					"        const me = this;",
					"        const authConfig = this._config.auth;",
					"        if (me._forceRetreiveToken || me.hasTokenExpired) {",
					"            pm.sendRequest({",
					"                url: authConfig.issuer + \"/.well-known/openid-configuration\",",
					"                method: 'GET',",
					"                header: { 'Content-Type': 'application/x-www-form-urlencoded' }",
					"            },",
					"                function (err, res) {",
					"                    if (!me.hasError(err)) {",
					"                        pm.sendRequest(me.getTokenRequest(res.json()),",
					"                            function (err, res) {",
					"                                if (!me.hasError(err)) {",
					"                                    const json = res.json();",
					"                                    if (authConfig.auth_provider == \"Internal\") {",
					"                                        if (json.expires_in && json.access_token) {",
					"                                            const date = new Date();",
					"                                            me._config.set(\"AuthExpiration\", new Date(date.setTime(date.getTime() + json.expires_in * 1000)));",
					"                                            me._config.set(\"AuthToken\", json.access_token);",
					"                                        } else",
					"                                            me.hasError({ details: \"No expires_in or access_token in response\", response: res });",
					"                                    } else if (authConfig.auth_provider == \"Google\") {",
					"                                        if (json.id_token) {",
					"                                            const date = new Date();",
					"                                            me._config.set(\"AuthExpiration\", new Date(date.setMinutes(date.getMinutes() + 9)));",
					"                                            me._config.set(\"AuthToken\", json.id_token);",
					"                                        } else",
					"                                            me.hasError({ details: \"No id_token in response\", response: res });",
					"",
					"                                    }",
					"                                }",
					"                            }",
					"                        );",
					"                    }",
					"                }",
					"            );",
					"        }",
					"    }",
					"",
					"    hasError(error) {",
					"        if (error) {",
					"            console.error({ Title: \"Pre-request Script Authentication Error\", Error: error });",
					"            return true;",
					"        }",
					"        return false;",
					"    }",
					"",
					"    getTokenRequest(discoveryDoc) {",
					"        const request = { url: discoveryDoc.token_endpoint, method: \"POST\", body: {}, header: { \"Content-Type\": \"application/x-www-form-urlencoded\", \"User-Agent\": \"PostmanRuntime/7.26.8\" } };",
					"        const config = this._config.auth;",
					"        switch (config.auth_provider) {",
					"            case \"Internal\":",
					"                request.body = new QueryStringBuilder()",
					"                    .append(\"grant_type\", config.grant_type)",
					"                    .append(\"username\", config.user)",
					"                    .append(\"password\", config.password)",
					"                    .append(\"scope\", config.scope)",
					"                    .append(\"client_id\", config.client_id)",
					"                    .append(\"client_secret\", config.client_secret)",
					"                    .build();",
					"                break;",
					"",
					"            case \"Google\":",
					"                // https://developers.google.com/identity/protocols/oauth2/service-account#httprest",
					"                const date = new Date();",
					"                const header = { \"alg\": \"RS256\", \"typ\": \"JWT\" };",
					"                const payload = {",
					"                    \"iss\": config.client_email,",
					"                    \"scope\": config.scope,",
					"                    \"aud\": config.token_uri,",
					"                    \"exp\": Math.floor(date.setHours(date.getHours() + 1) / 1000),",
					"                    \"iat\": Math.floor(date / 1000)",
					"                };",
					"                request.body = new QueryStringBuilder()",
					"                    .append(\"grant_type\", config.grant_type)",
					"                    .append(\"assertion\", pmlib.jwtSign(config.private_key, payload, header, 600, 'RS256'))",
					"                    .build();",
					"                break;",
					"",
					"            case \"client_credentials\":",
					"                request.body = new QueryStringBuilder()",
					"                    .append(\"grant_type\", config.grant_type)",
					"                    .append(\"scope\", config.scope)",
					"                    .append(\"client_id\", config.client_id)",
					"                    .append(\"client_secret\", config.client_secret)",
					"                    .build();",
					"",
					"                break;",
					"        }",
					"        return request;",
					"    }",
					"}",
					"",
					"new AuthManager().retreiveToken();",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "64247c14-971d-4a2f-94a2-88cfb6e6404a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "498e4e93-0344-4efc-bd4e-50a33c13f79b",
			"key": "apiUrl",
			"value": "https://localhost:5001/api/v1.0"
		},
		{
			"id": "0759bb50-0396-4efa-9449-2cda0d1c52d8",
			"key": "AppPrefix",
			"value": "em"
		},
		{
			"id": "0b52fe05-4c4e-46fe-9a0a-45f59258e204",
			"key": "AuthToken",
			"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjJlMzAyNWYyNmI1OTVmOTZlYWM5MDdjYzJiOTQ3MTQyMmJjYWViOTMiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJwcm9maWxlLGVtYWlsLG9wZW5pZCxwaG9uZSIsImF6cCI6ImVtLXBvc3RtYW5AZXZlbnQtbWFuYWdlci0yOTU4MDcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJlbWFpbCI6ImVtLXBvc3RtYW5AZXZlbnQtbWFuYWdlci0yOTU4MDcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZXhwIjoxNjA2NTM0NzkzLCJpYXQiOjE2MDY1MzExOTMsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsInN1YiI6IjEwNjc5MTY2MDE4NjQ1NjkyNTIyNSJ9.qWy_cMvpqH5j4Qf_FIdeEbYGDbqPtNNOj3kolp-eIrH46EUUIQW_odE87g291TJm2MRNHbV9UDBeTWhZbjDhPv0S6-TaeqAekqZDkt5XF1fe4ZuXU-z8qcvLM_1O4PLWE1yTzcUI5xKlNyw0pjj21HWtOEQzEoThZNuOREwNne7-IdbWjd_mQk9OOmk3oPq7MbpgS6JJlF6Y0sZu9zVu8GPiORTp2jvnHUelV-skAa2d2UQu4FoHFMF9ar3SRvjrWAgrp7X2_dgomEe0bXKyc-IcAw7abYGDvUnT8f6F2DOVOlA_2rT0L-EZCKqb-9xGovmV85nOLDP5w9ixLT-ZKw"
		},
		{
			"id": "f74cbe0d-6f00-4635-96b8-f98fa8451243",
			"key": "AuthExpiration",
			"value": "2020-11-28T02:48:53.596Z"
		},
		{
			"id": "01b8561e-d954-4552-b7cb-d4cf0ff1d26c",
			"value": "",
			"disabled": true
		}
	],
	"protocolProfileBehavior": {}
}